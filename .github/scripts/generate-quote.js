const axios = require("axios");
const fs = require("fs");
const path = require("path");

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

if (!GEMINI_API_KEY) {
  console.error("‚ùå GEMINI_API_KEY „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ");
  process.exit(1);
}

const BMAC_LINK = "https://www.buymeacoffee.com/kgninja";
const SITE_BASE_URL = "https://kg-ninja.github.io/YU-GEKI-Gemini";

// „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞: Summary„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„Å´Ëã±Ë™û„ÅÆË°å„Åã„Çâ„Ç®„ÉÉ„Çª„É≥„Çπ„ÇíÁîüÊàê„Åó„Çà„ÅÜ„Å®„Åô„Çã
function getFallbackEssence(fullText) {
  const lines = fullText.split('\n');
  let fallbackText = "Check out the latest AI quote!"; // „Éá„Éï„Ç©„É´„Éà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÉÜ„Ç≠„Çπ„Éà
  if (lines.length > 0) {
    let potentialEnglishLine = "";
    // ÊúÄÂæå„ÅÆË°å„Åã„ÇâËã±Â≠ó„ÅåÂê´„Åæ„Çå„ÇãË°å„ÇíÊé¢„Åô (Ëã±Ë™û„ÅÆÊ†ºË®Ä„Å®‰ªÆÂÆö)
    for (let i = lines.length - 1; i >= 0; i--) {
      if (/[a-zA-Z]/.test(lines[i]) && lines[i].trim() !== "") {
        potentialEnglishLine = lines[i].trim();
        break;
      }
    }
    if (potentialEnglishLine) {
        fallbackText = potentialEnglishLine;
    } else if (lines[0].trim() !== "") { // „Åù„Çå„Åß„ÇÇË¶ã„Å§„Åã„Çâ„Å™„Åë„Çå„Å∞ÊúÄÂàù„ÅÆË°å (Êó•Êú¨Ë™û„ÅÆÂèØËÉΩÊÄß„ÇÇ„ÅÇ„Çã)
        fallbackText = lines[0].trim();
    }
  }
  // „ÉÑ„Ç§„Éº„Éà„Å´ÈÅ©„Åó„ÅüÈï∑„Åï„Å´Ë™øÊï¥
  return fallbackText.substring(0, 80) + (fallbackText.length > 80 ? "..." : "");
}

async function main() {
  const prompt = `
Áü≠„ÅÑÊó•Êú¨Ë™û„ÅÆÊ†ºË®Ä„Å®„ÄÅ„Åù„Çå„Å´ÂØæÂøú„Åô„ÇãËã±Ë™ûË®≥„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà„Åù„Çå„Åû„Çå50ÊñáÂ≠óÁ®ãÂ∫¶Ôºâ„ÄÇ
Ê¨°„Å´„ÄÅ„Åù„ÅÆÊ†ºË®Ä„ÅÆÈùûÂ∏∏„Å´Áü≠„ÅÑËã±Ë™û„ÅÆË¶ÅÁ¥ÑÔºà„ÉÑ„Ç§„Éº„ÉàÁî®„ÄÅ10ÔΩû20Ë™ûÁ®ãÂ∫¶Ôºâ„Çí„ÄåSummary:„Äç„Å®„ÅÑ„ÅÜÊé•È†≠Ëæû„Çí‰ªò„Åë„Å¶„ÄÅÊîπË°å„Åó„Å¶„Åã„ÇâÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
„ÄåSummary:„Äç„ÅÆË°å„ÅÆÂæå„ÅØ„ÄÅ‰Ωï„ÇÇÂá∫Âäõ„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ‰ªñ„ÅÆÂâçÁΩÆ„Åç„ÇÑË™¨ÊòéÊñá„ÅØ‰∏ÄÂàáÂê´„ÇÅ„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ

‰æãÔºö
Âä™Âäõ„ÅØÂøÖ„ÅöÂ†±„Çè„Çå„Çã„ÄÇ
Effort always pays off.
Summary: Hard work leads to success.
`;

  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`;

  const res = await axios.post(apiUrl, {
    contents: [{ parts: [{ text: prompt }] }]
  });

  const apiGeneratedText = res.data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

  // „Éá„Éê„ÉÉ„Ç∞Áî®„Å´API„Åã„Çâ„ÅÆÁîü„É¨„Çπ„Éù„É≥„Çπ„ÇíÂá∫Âäõ„Åó„Åü„ÅÑÂ†¥Âêà„ÅØ„ÄÅ‰ª•‰∏ã„ÅÆ„Ç≥„É°„É≥„Éà„ÇíËß£Èô§„Åó„Å¶„Åè„Å†„Åï„ÅÑ
  // console.log("--- RAW API Response Text START ---");
  // console.log(apiGeneratedText);
  // console.log("--- RAW API Response Text END ---");

  let displayQuote = "Today's quote is taking a break due to AI whims. Please check back later!";
  let tweetEssence = "Check out the latest AI quote!";

  if (apiGeneratedText) {
    const summaryMarker = "\nSummary:"; // „Éû„Éº„Ç´„Éº„ÅØÊîπË°å„ÇíÂê´„ÇÄ
    const summaryIndex = apiGeneratedText.indexOf(summaryMarker);

    if (summaryIndex !== -1) {
      // "Summary:" „Éû„Éº„Ç´„Éº„ÅåË¶ã„Å§„Åã„Å£„ÅüÂ†¥Âêà
      displayQuote = apiGeneratedText.substring(0, summaryIndex).trim();
      let potentialEssence = apiGeneratedText.substring(summaryIndex + summaryMarker.length).trim();
      // Summary„ÅÆÂæå„ÅÆÊúÄÂàù„ÅÆ1Ë°å„Å†„Åë„Çí„Ç®„ÉÉ„Çª„É≥„Çπ„Å®„Åó„Å¶Êé°Áî®
      tweetEssence = potentialEssence.split('\n')[0].trim();
      
      // „ÇÇ„Åó„Ç®„ÉÉ„Çª„É≥„Çπ„ÅåÁ©∫ÊñáÂ≠ó„Å´„Å™„Å£„Å¶„Åó„Åæ„Å£„ÅüÂ†¥Âêà„ÅÆ‰øùÈô∫ (Summary: „ÅÆÁõ¥Âæå„ÅåÁ©∫Ë°å„Å†„Å£„Åü„Å™„Å©)
      if (tweetEssence === "") {
          if (potentialEssence.split('\n').length > 1 && potentialEssence.split('\n')[1].trim() !== "") {
              tweetEssence = potentialEssence.split('\n')[1].trim(); // Ê¨°„ÅÆË°å„ÇíË©¶„Åô
          } else {
              tweetEssence = getFallbackEssence(displayQuote); // „Åù„Çå„Åß„ÇÇ„ÉÄ„É°„Å™„Çâ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
          }
      }
    } else {
      // "Summary:"„Éû„Éº„Ç´„Éº„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÂÖ®‰Ωì„ÇídisplayQuote„Å®„Åó„ÄÅ„Ç®„ÉÉ„Çª„É≥„Çπ„ÅØ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
      displayQuote = apiGeneratedText.trim();
      tweetEssence = getFallbackEssence(displayQuote);
    }
  }

  const today = new Date().toISOString().split("T")[0];

  const [year, month, day] = today.split('-');
  const postPath = `/${year}/${month}/${day}/gemini-quote.html`;
  const postPermalink = `${SITE_BASE_URL}${postPath}`;

  const tweetText = `AI Quote of the Day: "${tweetEssence}" See more üëá`;
  const encodedTweetText = encodeURIComponent(tweetText);
  const encodedPostPermalink = encodeURIComponent(postPermalink);
  const dynamicTwitterShareUrl = `https://twitter.com/intent/tweet?text=${encodedTweetText}&url=${encodedPostPermalink}`;

  const md = `---
title: "Gemini's Wisdom ${today}"
date: ${today}
tags: [AI, Quote, English]
layout: post
---

${displayQuote}
---

‚òïÔ∏è [Buy Me a Coffee](${BMAC_LINK})

üê¶ [Share on X](${dynamicTwitterShareUrl})
`;

  const outDir = path.join(process.cwd(), "_posts");
  if (!fs.existsSync(outDir)) {
    fs.mkdirSync(outDir, { recursive: true });
  }
  const outPath = path.join(outDir, `${today}-gemini-quote.md`);
  fs.writeFileSync(outPath, md);

  console.log("‚úÖ Gemini quote saved:", outPath);
  console.log("üìù Display Quote (for blog):\n", displayQuote);
  console.log("üê¶ Tweet Essence (English for tweet):\n", tweetEssence);
}

main().catch(err => {
  console.error("‚ùå Gemini API request failed.");
  if (err.response) {
    console.error("Status Code:", err.response.status);
    console.error("API Error Details:", JSON.stringify(err.response.data, null, 2));
  } else if (err.request) {
    console.error("No response received from the API:", err.request);
  } else {
    console.error("Error setting up the request:", err.message);
  }
  process.exit(1);
});
